// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/template/template.proto

package template

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MLService_GPT_FullMethodName = "/template.MLService/GPT"
)

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MLServiceClient interface {
	GPT(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (*GPTResponse, error)
}

type mLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLServiceClient(cc grpc.ClientConnInterface) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) GPT(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (*GPTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPTResponse)
	err := c.cc.Invoke(ctx, MLService_GPT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLServiceServer is the server API for MLService service.
// All implementations must embed UnimplementedMLServiceServer
// for forward compatibility.
type MLServiceServer interface {
	GPT(context.Context, *GPTRequest) (*GPTResponse, error)
	mustEmbedUnimplementedMLServiceServer()
}

// UnimplementedMLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMLServiceServer struct{}

func (UnimplementedMLServiceServer) GPT(context.Context, *GPTRequest) (*GPTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPT not implemented")
}
func (UnimplementedMLServiceServer) mustEmbedUnimplementedMLServiceServer() {}
func (UnimplementedMLServiceServer) testEmbeddedByValue()                   {}

// UnsafeMLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLServiceServer will
// result in compilation errors.
type UnsafeMLServiceServer interface {
	mustEmbedUnimplementedMLServiceServer()
}

func RegisterMLServiceServer(s grpc.ServiceRegistrar, srv MLServiceServer) {
	// If the following call pancis, it indicates UnimplementedMLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MLService_ServiceDesc, srv)
}

func _MLService_GPT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GPT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_GPT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GPT(ctx, req.(*GPTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MLService_ServiceDesc is the grpc.ServiceDesc for MLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GPT",
			Handler:    _MLService_GPT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template/template.proto",
}
